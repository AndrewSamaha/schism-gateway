schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Chunk
  @join__type(graph: SCHISM_SERVICE)
{
  id: ID
  x: Int
  y: Int
  tiles: [Tile]
}

type ChunkCollection
  @join__type(graph: SCHISM_SERVICE)
{
  chunkSize: Int
  chunks: [Chunk]!
  stateTimeUTC: String
  queryDuration: Int
}

input ChunkInput
  @join__type(graph: SCHISM_ENTITY)
{
  x: Int!
  y: Int!
}

type Entity
  @join__type(graph: SCHISM_ENTITY)
{
  id: ID
  name: String
  longName: String
  speed: Float
  ownerId: String
  position: Position
  color: String
}

input EntityInput
  @join__type(graph: SCHISM_ENTITY)
{
  id: ID!
  name: String
  longName: String
  speed: Float
  ownerId: String
  position: PositionInput
  color: String
}

type ErrorAuthentication
  @join__type(graph: SCHISM_SERVICE)
{
  message: String
}

"""Return type for creating a player when one already exists"""
type ErrorPlayerAlreadyExists
  @join__type(graph: SCHISM_SERVICE)
{
  message: String
}

type GameState
  @join__type(graph: SCHISM_SERVICE)
{
  position: Position
}

union GenerateAuthTokenResponse
  @join__type(graph: SCHISM_SERVICE)
 = Player | ErrorAuthentication

scalar join__FieldSet

enum join__Graph {
  SCHISM_ENTITY @join__graph(name: "schism-entity", url: "http://localhost:4011")
  SCHISM_SERVICE @join__graph(name: "schism-service", url: "http://localhost:4010")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Mutation
  @join__type(graph: SCHISM_ENTITY)
  @join__type(graph: SCHISM_SERVICE)
{
  updateEntity(entity: EntityInput!): Boolean @join__field(graph: SCHISM_ENTITY)
  insertEntity(entity: EntityInput!): Boolean @join__field(graph: SCHISM_ENTITY)
  upsertEntities(entities: [EntityInput]!): [Boolean] @join__field(graph: SCHISM_ENTITY)
  upsertMyEntities(entities: [EntityInput]!): [Boolean] @join__field(graph: SCHISM_ENTITY)

  """Create a player"""
  createPlayer(name: String!, password: String!): PlayerResponse @join__field(graph: SCHISM_SERVICE)

  """Try to generate an auth token by testing a password"""
  login(name: String!, password: String!): GenerateAuthTokenResponse @join__field(graph: SCHISM_SERVICE)
}

"""A player"""
type Player
  @join__type(graph: SCHISM_SERVICE)
{
  id: ID!
  name: String
  gameState: GameState
  authToken: String
  password: String
}

"""Return type for when attempting to create a new player"""
union PlayerResponse
  @join__type(graph: SCHISM_SERVICE)
 = Player | ErrorPlayerAlreadyExists

type Position
  @join__type(graph: SCHISM_ENTITY)
  @join__type(graph: SCHISM_SERVICE)
{
  x: Float
  y: Float
  z: Float
}

input PositionInput
  @join__type(graph: SCHISM_ENTITY)
  @join__type(graph: SCHISM_SERVICE)
{
  x: Float
  y: Float
}

type Query
  @join__type(graph: SCHISM_ENTITY)
  @join__type(graph: SCHISM_SERVICE)
{
  getEntityById(id: ID!): [Entity]! @join__field(graph: SCHISM_ENTITY)
  getEntitiesInChunk(chunk: ChunkInput!): [Entity]! @join__field(graph: SCHISM_ENTITY)
  getEntitiesByOwner(ownerId: ID!): [Entity]! @join__field(graph: SCHISM_ENTITY)
  getEntitiesNearPosition(position: PositionInput!, range: Int): [Entity]! @join__field(graph: SCHISM_ENTITY)
  getAllEntities: [Entity]! @join__field(graph: SCHISM_ENTITY)
  getMyEntities: [Entity]! @join__field(graph: SCHISM_ENTITY)
  getEntitiesICanSee: [Entity]! @join__field(graph: SCHISM_ENTITY)

  """Returns a list of all players"""
  getAllPlayers: [Player] @join__field(graph: SCHISM_SERVICE)

  """Returns a player by its ID"""
  getPlayerById(id: ID!): Player @join__field(graph: SCHISM_SERVICE)
  getAllTiles: [Tile]! @join__field(graph: SCHISM_SERVICE)
  getTile(x: Int!, y: Int!): Tile @join__field(graph: SCHISM_SERVICE)
  getTilesNear(positions: [PositionInput]!, range: Int!): [Tile]! @join__field(graph: SCHISM_SERVICE) @deprecated(reason: "Use 'getChunk' instead'.")
  getWorldState(positions: [PositionInput]!, range: Int!): WorldState! @join__field(graph: SCHISM_SERVICE)
  getChunk(positions: [PositionInput]!, chunkSize: Int!): WorldState! @join__field(graph: SCHISM_SERVICE)
  getChunkCollection(positions: [PositionInput]!, chunkSize: Int!): ChunkCollection! @join__field(graph: SCHISM_SERVICE)
}

"""A tile"""
type Tile
  @join__type(graph: SCHISM_SERVICE)
{
  id: ID!
  x: Int!
  y: Int!
  TileType: TileType
}

"""A TypeTYpe"""
type TileType
  @join__type(graph: SCHISM_SERVICE)
{
  id: ID
  type: String!
}

"""For queries that return information about the world state"""
type WorldState
  @join__type(graph: SCHISM_SERVICE)
{
  tiles: [Tile]!
  position: [Position]
  stateTimeUTC: String
  range: Int
  chunkSize: Int
}